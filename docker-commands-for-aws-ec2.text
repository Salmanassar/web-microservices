Docker Commands Used in this Video Course

Below is a list of Docker commands used in this video course.
Docker Commands Cheat Sheet

Here is a list of general Docker commands used in this video course:

http://appsdeveloperblog.com/docker-commands-cheat-sheet/

Commands for chmod 400 on Windows PowerShell
icacls.exe $path /reset
# Give current user explicit read-permission
icacls.exe test.pem /GRANT:R "$($env:USERNAME):(R)"
# Disable inheritance and remove inherited permissions
icacls.exe test.pem /inheritance:r

Install Docker on AWS EC2

    sudo yum install docker
    sudo service docker start
    sudo usermod -a -G docker ec2-user

Install Java 17
Option 1: Install the headful Amazon Corretto 17:
sudo yum install java-17-amazon-corretto
Option 2: Install the JDK for Amazon Corretto 17:
sudo yum install java-17-amazon-corretto-devel



Run RabbitMQ Docker Container

docker run -d --name rabbit-name-management -p 15672:15672 -p 5672:5672 -p 5671:5671 rabbitmq:3.10-management-alpine

To run RabbitMQ and change Default user name and password:

docker run -d --name rabbit-name-management -p 15672:15672 -p 5672:5672 -p 5671:5671 -e RABBITMQ_DEFAULT_USER=user –e RABBITMQ_DEFAULT_PASS=password rabbitmq:3.10.7-management

add some additional ports to aws security like SSH TCP 22, HTTP and HTTPS 80, HTTP and HTTPS 443,
and all of them with 0.0.0.0/0, ::/0

Run Config Servere Docker Container

docker run -d -p 8012:8012 -e "spring.rabbitmq.host=172.17.0.2" folkner9379992/config-server


Run Eureka Docker Container

docker run -d -p 8010:8010 -e "spring.cloud.config.uri=http://172.31.0.133:8012" kargopolov/sk-eureka-server


Run  API Gateway Docker Container

docker run -d -e -e "spring.cloud.config.uri=http://172.31.34.61:8011" -e "spring.rabbitmq.host=172.31.34.61" -p 8082:8082 folkner9379992/api-gateway-ag


Run Elasticsearch Docker Container
#create one connection between elasticsearch and kibana bridge network for single connection
docker network create --driver bridge api-network
docker run -d -v esdata1:/usr/share/elasticsearch/data --name elasticsearch -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -e xpack.security.enabled=false --network api-network elasticsearch:8.4.1
docker run -d -v esdata1:/usr/share/elasticsearch/data --name elasticsearch -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" --network api-network elasticsearch:7.17.6
docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" --network api-network elasticsearch:7.17.6
docker exec -it e1fc2b8c825c bash
bin/elasticsearch-reset-password -u elastic


Run Kibana Docker Container

docker run -d --network api-network -p 5601:5601 kibana:7.17.6


Run Albums Microservice Docker Container

docker run -it -d -e "eureka.client.serviceUrl.defaultZone=http://test:test@99.79.99.76:8010/eureka" --network host -e "logging.file=/api-logs/albums-ws.log" -v /home/ec2-user/api-logs:/api-logs kargopolov/albums-microservice


Run Logstash for Albums Microservice Docker Container

docker run -d --name logstash /home/ec2-user/api-logs:/api-logs kargopolov/sk-albums-microservice-logstash


Run MySQL Docker Container

docker run –d -p 3306:3306 --name mysql-docker-container -e MYSQL_ROOT_PASSWORD=sergey -e MYSQL_DATABASE=photo_app -e MYSQL_USER=sergey -e MYSQL_PASSWORD=sergey mysql:latest


Run Users Microservice Docker Container

docker run -d -e "spring.cloud.config.uri=http://172.31.34.61:8011" -e "spring.rabbitmq.host=172.31.34.61" -e "eureka.client.serviceUrl.defaultZone=http://test:test@172.31.18.99:8010/eureka" -e "spring.datasource.url=jdbc:mysql://172.31.13.167:3306/photo_app?serverTimezone=UTC" --network host -e "logging.file=/api-logs/users-ws.log" -v /home/ec2-user/api-logs:/api-logs kargopolov/sk-users-microservice


Run Logstash for Users Microservice

docker run -d --name users-ws-logstash /home/ec2-user/home:/api-logs kargopolov/sk-users-ws-logstash


#for creating a docker image
encrypt.key-store.location=file:/apiEncryptionKey.jks-storepass

docker run -d -p 8010:8010 -e "spring.cloud.config.uri=http://172.31.34.61:8011" folkner9379992/discovery-service-ds
docker build --tag=discovery-service --force-rm=true .


docker run -d -v esdata1:/usr/share/elasticsearch/data --name elasticsearch -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -e xpack.security.enabled=false --network api-network elasticsearch:8.4.1
docker run -d --network api-network -p 5601:5601 kibana:8.4.1